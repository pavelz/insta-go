// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pavelz/insta-go/ent/photo"
	"github.com/pavelz/insta-go/ent/predicate"
	"github.com/pavelz/insta-go/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	age           *int
	addage        *int
	name          *string
	nick          *string
	nick2         *string
	image         *[]byte
	clearimage    bool
	photos        map[int]struct{}
	removedPhotos map[int]struct{}
	predicates    []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetAge sets the age field.
func (uu *UserUpdate) SetAge(i int) *UserUpdate {
	uu.age = &i
	uu.addage = nil
	return uu
}

// AddAge adds i to age.
func (uu *UserUpdate) AddAge(i int) *UserUpdate {
	if uu.addage == nil {
		uu.addage = &i
	} else {
		*uu.addage += i
	}
	return uu
}

// SetName sets the name field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.name = &s
	return uu
}

// SetNillableName sets the name field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetNick sets the nick field.
func (uu *UserUpdate) SetNick(s string) *UserUpdate {
	uu.nick = &s
	return uu
}

// SetNillableNick sets the nick field if the given value is not nil.
func (uu *UserUpdate) SetNillableNick(s *string) *UserUpdate {
	if s != nil {
		uu.SetNick(*s)
	}
	return uu
}

// SetNick2 sets the nick2 field.
func (uu *UserUpdate) SetNick2(s string) *UserUpdate {
	uu.nick2 = &s
	return uu
}

// SetNillableNick2 sets the nick2 field if the given value is not nil.
func (uu *UserUpdate) SetNillableNick2(s *string) *UserUpdate {
	if s != nil {
		uu.SetNick2(*s)
	}
	return uu
}

// SetImage sets the image field.
func (uu *UserUpdate) SetImage(b []byte) *UserUpdate {
	uu.image = &b
	return uu
}

// ClearImage clears the value of image.
func (uu *UserUpdate) ClearImage() *UserUpdate {
	uu.image = nil
	uu.clearimage = true
	return uu
}

// AddPhotoIDs adds the photos edge to Photo by ids.
func (uu *UserUpdate) AddPhotoIDs(ids ...int) *UserUpdate {
	if uu.photos == nil {
		uu.photos = make(map[int]struct{})
	}
	for i := range ids {
		uu.photos[ids[i]] = struct{}{}
	}
	return uu
}

// AddPhotos adds the photos edges to Photo.
func (uu *UserUpdate) AddPhotos(p ...*Photo) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPhotoIDs(ids...)
}

// RemovePhotoIDs removes the photos edge to Photo by ids.
func (uu *UserUpdate) RemovePhotoIDs(ids ...int) *UserUpdate {
	if uu.removedPhotos == nil {
		uu.removedPhotos = make(map[int]struct{})
	}
	for i := range ids {
		uu.removedPhotos[ids[i]] = struct{}{}
	}
	return uu
}

// RemovePhotos removes photos edges to Photo.
func (uu *UserUpdate) RemovePhotos(p ...*Photo) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePhotoIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if uu.age != nil {
		if err := user.AgeValidator(*uu.age); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"age\": %v", err)
		}
	}
	return uu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(uu.driver.Dialect())
		selector = builder.Select(user.FieldID).From(builder.Table(user.Table))
	)
	for _, p := range uu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = uu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := uu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(user.Table).Where(sql.InInts(user.FieldID, ids...))
	)
	if value := uu.age; value != nil {
		updater.Set(user.FieldAge, *value)
	}
	if value := uu.addage; value != nil {
		updater.Add(user.FieldAge, *value)
	}
	if value := uu.name; value != nil {
		updater.Set(user.FieldName, *value)
	}
	if value := uu.nick; value != nil {
		updater.Set(user.FieldNick, *value)
	}
	if value := uu.nick2; value != nil {
		updater.Set(user.FieldNick2, *value)
	}
	if value := uu.image; value != nil {
		updater.Set(user.FieldImage, *value)
	}
	if uu.clearimage {
		updater.SetNull(user.FieldImage)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(uu.removedPhotos) > 0 {
		eids := make([]int, len(uu.removedPhotos))
		for eid := range uu.removedPhotos {
			eids = append(eids, eid)
		}
		query, args := builder.Update(user.PhotosTable).
			SetNull(user.PhotosColumn).
			Where(sql.InInts(user.PhotosColumn, ids...)).
			Where(sql.InInts(photo.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(uu.photos) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range uu.photos {
				p.Or().EQ(photo.FieldID, eid)
			}
			query, args := builder.Update(user.PhotosTable).
				Set(user.PhotosColumn, id).
				Where(sql.And(p, sql.IsNull(user.PhotosColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return 0, rollback(tx, err)
			}
			if int(affected) < len(uu.photos) {
				return 0, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"photos\" %v already connected to a different \"User\"", keys(uu.photos))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	id            int
	age           *int
	addage        *int
	name          *string
	nick          *string
	nick2         *string
	image         *[]byte
	clearimage    bool
	photos        map[int]struct{}
	removedPhotos map[int]struct{}
}

// SetAge sets the age field.
func (uuo *UserUpdateOne) SetAge(i int) *UserUpdateOne {
	uuo.age = &i
	uuo.addage = nil
	return uuo
}

// AddAge adds i to age.
func (uuo *UserUpdateOne) AddAge(i int) *UserUpdateOne {
	if uuo.addage == nil {
		uuo.addage = &i
	} else {
		*uuo.addage += i
	}
	return uuo
}

// SetName sets the name field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.name = &s
	return uuo
}

// SetNillableName sets the name field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetNick sets the nick field.
func (uuo *UserUpdateOne) SetNick(s string) *UserUpdateOne {
	uuo.nick = &s
	return uuo
}

// SetNillableNick sets the nick field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNick(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNick(*s)
	}
	return uuo
}

// SetNick2 sets the nick2 field.
func (uuo *UserUpdateOne) SetNick2(s string) *UserUpdateOne {
	uuo.nick2 = &s
	return uuo
}

// SetNillableNick2 sets the nick2 field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNick2(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNick2(*s)
	}
	return uuo
}

// SetImage sets the image field.
func (uuo *UserUpdateOne) SetImage(b []byte) *UserUpdateOne {
	uuo.image = &b
	return uuo
}

// ClearImage clears the value of image.
func (uuo *UserUpdateOne) ClearImage() *UserUpdateOne {
	uuo.image = nil
	uuo.clearimage = true
	return uuo
}

// AddPhotoIDs adds the photos edge to Photo by ids.
func (uuo *UserUpdateOne) AddPhotoIDs(ids ...int) *UserUpdateOne {
	if uuo.photos == nil {
		uuo.photos = make(map[int]struct{})
	}
	for i := range ids {
		uuo.photos[ids[i]] = struct{}{}
	}
	return uuo
}

// AddPhotos adds the photos edges to Photo.
func (uuo *UserUpdateOne) AddPhotos(p ...*Photo) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPhotoIDs(ids...)
}

// RemovePhotoIDs removes the photos edge to Photo by ids.
func (uuo *UserUpdateOne) RemovePhotoIDs(ids ...int) *UserUpdateOne {
	if uuo.removedPhotos == nil {
		uuo.removedPhotos = make(map[int]struct{})
	}
	for i := range ids {
		uuo.removedPhotos[ids[i]] = struct{}{}
	}
	return uuo
}

// RemovePhotos removes photos edges to Photo.
func (uuo *UserUpdateOne) RemovePhotos(p ...*Photo) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePhotoIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if uuo.age != nil {
		if err := user.AgeValidator(*uuo.age); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"age\": %v", err)
		}
	}
	return uuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	var (
		builder  = sql.Dialect(uuo.driver.Dialect())
		selector = builder.Select(user.Columns...).From(builder.Table(user.Table))
	)
	user.ID(uuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = uuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		u = &User{config: uuo.config}
		if err := u.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into User: %v", err)
		}
		id = u.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("User with id: %v", uuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one User with the same id: %v", uuo.id)
	}

	tx, err := uuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(user.Table).Where(sql.InInts(user.FieldID, ids...))
	)
	if value := uuo.age; value != nil {
		updater.Set(user.FieldAge, *value)
		u.Age = *value
	}
	if value := uuo.addage; value != nil {
		updater.Add(user.FieldAge, *value)
		u.Age += *value
	}
	if value := uuo.name; value != nil {
		updater.Set(user.FieldName, *value)
		u.Name = *value
	}
	if value := uuo.nick; value != nil {
		updater.Set(user.FieldNick, *value)
		u.Nick = *value
	}
	if value := uuo.nick2; value != nil {
		updater.Set(user.FieldNick2, *value)
		u.Nick2 = *value
	}
	if value := uuo.image; value != nil {
		updater.Set(user.FieldImage, *value)
		u.Image = *value
	}
	if uuo.clearimage {
		var value []byte
		u.Image = value
		updater.SetNull(user.FieldImage)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(uuo.removedPhotos) > 0 {
		eids := make([]int, len(uuo.removedPhotos))
		for eid := range uuo.removedPhotos {
			eids = append(eids, eid)
		}
		query, args := builder.Update(user.PhotosTable).
			SetNull(user.PhotosColumn).
			Where(sql.InInts(user.PhotosColumn, ids...)).
			Where(sql.InInts(photo.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(uuo.photos) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range uuo.photos {
				p.Or().EQ(photo.FieldID, eid)
			}
			query, args := builder.Update(user.PhotosTable).
				Set(user.PhotosColumn, id).
				Where(sql.And(p, sql.IsNull(user.PhotosColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return nil, rollback(tx, err)
			}
			if int(affected) < len(uuo.photos) {
				return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"photos\" %v already connected to a different \"User\"", keys(uuo.photos))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return u, nil
}
