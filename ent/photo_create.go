// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pavelz/insta-go/ent/photo"
)

// PhotoCreate is the builder for creating a Photo entity.
type PhotoCreate struct {
	config
	lat      *float64
	lng      *float64
	image    *[]byte
	fielname *string
}

// SetLat sets the lat field.
func (pc *PhotoCreate) SetLat(f float64) *PhotoCreate {
	pc.lat = &f
	return pc
}

// SetNillableLat sets the lat field if the given value is not nil.
func (pc *PhotoCreate) SetNillableLat(f *float64) *PhotoCreate {
	if f != nil {
		pc.SetLat(*f)
	}
	return pc
}

// SetLng sets the lng field.
func (pc *PhotoCreate) SetLng(f float64) *PhotoCreate {
	pc.lng = &f
	return pc
}

// SetNillableLng sets the lng field if the given value is not nil.
func (pc *PhotoCreate) SetNillableLng(f *float64) *PhotoCreate {
	if f != nil {
		pc.SetLng(*f)
	}
	return pc
}

// SetImage sets the image field.
func (pc *PhotoCreate) SetImage(b []byte) *PhotoCreate {
	pc.image = &b
	return pc
}

// SetFielname sets the fielname field.
func (pc *PhotoCreate) SetFielname(s string) *PhotoCreate {
	pc.fielname = &s
	return pc
}

// Save creates the Photo in the database.
func (pc *PhotoCreate) Save(ctx context.Context) (*Photo, error) {
	if pc.lat == nil {
		v := photo.DefaultLat
		pc.lat = &v
	}
	if pc.lng == nil {
		v := photo.DefaultLng
		pc.lng = &v
	}
	if pc.fielname == nil {
		return nil, errors.New("ent: missing required field \"fielname\"")
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PhotoCreate) SaveX(ctx context.Context) *Photo {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PhotoCreate) sqlSave(ctx context.Context) (*Photo, error) {
	var (
		builder = sql.Dialect(pc.driver.Dialect())
		ph      = &Photo{config: pc.config}
	)
	tx, err := pc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(photo.Table).Default()
	if value := pc.lat; value != nil {
		insert.Set(photo.FieldLat, *value)
		ph.Lat = *value
	}
	if value := pc.lng; value != nil {
		insert.Set(photo.FieldLng, *value)
		ph.Lng = *value
	}
	if value := pc.image; value != nil {
		insert.Set(photo.FieldImage, *value)
		ph.Image = *value
	}
	if value := pc.fielname; value != nil {
		insert.Set(photo.FieldFielname, *value)
		ph.Fielname = *value
	}
	id, err := insertLastID(ctx, tx, insert.Returning(photo.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	ph.ID = int(id)
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return ph, nil
}
