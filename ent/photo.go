// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Photo is the model entity for the Photo schema.
type Photo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Lat holds the value of the "lat" field.
	Lat float64 `json:"lat,omitempty"`
	// Lng holds the value of the "lng" field.
	Lng float64 `json:"lng,omitempty"`
	// Image holds the value of the "image" field.
	Image []byte `json:"image,omitempty"`
	// Fielname holds the value of the "fielname" field.
	Fielname string `json:"fielname,omitempty"`
}

// FromRows scans the sql response data into Photo.
func (ph *Photo) FromRows(rows *sql.Rows) error {
	var vph struct {
		ID       int
		Lat      sql.NullFloat64
		Lng      sql.NullFloat64
		Image    []byte
		Fielname sql.NullString
	}
	// the order here should be the same as in the `photo.Columns`.
	if err := rows.Scan(
		&vph.ID,
		&vph.Lat,
		&vph.Lng,
		&vph.Image,
		&vph.Fielname,
	); err != nil {
		return err
	}
	ph.ID = vph.ID
	ph.Lat = vph.Lat.Float64
	ph.Lng = vph.Lng.Float64
	ph.Image = vph.Image
	ph.Fielname = vph.Fielname.String
	return nil
}

// Update returns a builder for updating this Photo.
// Note that, you need to call Photo.Unwrap() before calling this method, if this Photo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ph *Photo) Update() *PhotoUpdateOne {
	return (&PhotoClient{ph.config}).UpdateOne(ph)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ph *Photo) Unwrap() *Photo {
	tx, ok := ph.config.driver.(*txDriver)
	if !ok {
		panic("ent: Photo is not a transactional entity")
	}
	ph.config.driver = tx.drv
	return ph
}

// String implements the fmt.Stringer.
func (ph *Photo) String() string {
	var builder strings.Builder
	builder.WriteString("Photo(")
	builder.WriteString(fmt.Sprintf("id=%v", ph.ID))
	builder.WriteString(", lat=")
	builder.WriteString(fmt.Sprintf("%v", ph.Lat))
	builder.WriteString(", lng=")
	builder.WriteString(fmt.Sprintf("%v", ph.Lng))
	builder.WriteString(", image=")
	builder.WriteString(fmt.Sprintf("%v", ph.Image))
	builder.WriteString(", fielname=")
	builder.WriteString(ph.Fielname)
	builder.WriteByte(')')
	return builder.String()
}

// Photos is a parsable slice of Photo.
type Photos []*Photo

// FromRows scans the sql response data into Photos.
func (ph *Photos) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vph := &Photo{}
		if err := vph.FromRows(rows); err != nil {
			return err
		}
		*ph = append(*ph, vph)
	}
	return nil
}

func (ph Photos) config(cfg config) {
	for _i := range ph {
		ph[_i].config = cfg
	}
}
