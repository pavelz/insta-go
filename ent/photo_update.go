// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pavelz/insta-go/ent/photo"
	"github.com/pavelz/insta-go/ent/predicate"
)

// PhotoUpdate is the builder for updating Photo entities.
type PhotoUpdate struct {
	config
	lat        *float64
	addlat     *float64
	lng        *float64
	addlng     *float64
	image      *[]byte
	clearimage bool
	fielname   *string
	predicates []predicate.Photo
}

// Where adds a new predicate for the builder.
func (pu *PhotoUpdate) Where(ps ...predicate.Photo) *PhotoUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetLat sets the lat field.
func (pu *PhotoUpdate) SetLat(f float64) *PhotoUpdate {
	pu.lat = &f
	pu.addlat = nil
	return pu
}

// SetNillableLat sets the lat field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableLat(f *float64) *PhotoUpdate {
	if f != nil {
		pu.SetLat(*f)
	}
	return pu
}

// AddLat adds f to lat.
func (pu *PhotoUpdate) AddLat(f float64) *PhotoUpdate {
	if pu.addlat == nil {
		pu.addlat = &f
	} else {
		*pu.addlat += f
	}
	return pu
}

// SetLng sets the lng field.
func (pu *PhotoUpdate) SetLng(f float64) *PhotoUpdate {
	pu.lng = &f
	pu.addlng = nil
	return pu
}

// SetNillableLng sets the lng field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableLng(f *float64) *PhotoUpdate {
	if f != nil {
		pu.SetLng(*f)
	}
	return pu
}

// AddLng adds f to lng.
func (pu *PhotoUpdate) AddLng(f float64) *PhotoUpdate {
	if pu.addlng == nil {
		pu.addlng = &f
	} else {
		*pu.addlng += f
	}
	return pu
}

// SetImage sets the image field.
func (pu *PhotoUpdate) SetImage(b []byte) *PhotoUpdate {
	pu.image = &b
	return pu
}

// ClearImage clears the value of image.
func (pu *PhotoUpdate) ClearImage() *PhotoUpdate {
	pu.image = nil
	pu.clearimage = true
	return pu
}

// SetFielname sets the fielname field.
func (pu *PhotoUpdate) SetFielname(s string) *PhotoUpdate {
	pu.fielname = &s
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PhotoUpdate) Save(ctx context.Context) (int, error) {
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PhotoUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PhotoUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PhotoUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PhotoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(pu.driver.Dialect())
		selector = builder.Select(photo.FieldID).From(builder.Table(photo.Table))
	)
	for _, p := range pu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = pu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := pu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(photo.Table).Where(sql.InInts(photo.FieldID, ids...))
	)
	if value := pu.lat; value != nil {
		updater.Set(photo.FieldLat, *value)
	}
	if value := pu.addlat; value != nil {
		updater.Add(photo.FieldLat, *value)
	}
	if value := pu.lng; value != nil {
		updater.Set(photo.FieldLng, *value)
	}
	if value := pu.addlng; value != nil {
		updater.Add(photo.FieldLng, *value)
	}
	if value := pu.image; value != nil {
		updater.Set(photo.FieldImage, *value)
	}
	if pu.clearimage {
		updater.SetNull(photo.FieldImage)
	}
	if value := pu.fielname; value != nil {
		updater.Set(photo.FieldFielname, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// PhotoUpdateOne is the builder for updating a single Photo entity.
type PhotoUpdateOne struct {
	config
	id         int
	lat        *float64
	addlat     *float64
	lng        *float64
	addlng     *float64
	image      *[]byte
	clearimage bool
	fielname   *string
}

// SetLat sets the lat field.
func (puo *PhotoUpdateOne) SetLat(f float64) *PhotoUpdateOne {
	puo.lat = &f
	puo.addlat = nil
	return puo
}

// SetNillableLat sets the lat field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableLat(f *float64) *PhotoUpdateOne {
	if f != nil {
		puo.SetLat(*f)
	}
	return puo
}

// AddLat adds f to lat.
func (puo *PhotoUpdateOne) AddLat(f float64) *PhotoUpdateOne {
	if puo.addlat == nil {
		puo.addlat = &f
	} else {
		*puo.addlat += f
	}
	return puo
}

// SetLng sets the lng field.
func (puo *PhotoUpdateOne) SetLng(f float64) *PhotoUpdateOne {
	puo.lng = &f
	puo.addlng = nil
	return puo
}

// SetNillableLng sets the lng field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableLng(f *float64) *PhotoUpdateOne {
	if f != nil {
		puo.SetLng(*f)
	}
	return puo
}

// AddLng adds f to lng.
func (puo *PhotoUpdateOne) AddLng(f float64) *PhotoUpdateOne {
	if puo.addlng == nil {
		puo.addlng = &f
	} else {
		*puo.addlng += f
	}
	return puo
}

// SetImage sets the image field.
func (puo *PhotoUpdateOne) SetImage(b []byte) *PhotoUpdateOne {
	puo.image = &b
	return puo
}

// ClearImage clears the value of image.
func (puo *PhotoUpdateOne) ClearImage() *PhotoUpdateOne {
	puo.image = nil
	puo.clearimage = true
	return puo
}

// SetFielname sets the fielname field.
func (puo *PhotoUpdateOne) SetFielname(s string) *PhotoUpdateOne {
	puo.fielname = &s
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PhotoUpdateOne) Save(ctx context.Context) (*Photo, error) {
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PhotoUpdateOne) SaveX(ctx context.Context) *Photo {
	ph, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ph
}

// Exec executes the query on the entity.
func (puo *PhotoUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PhotoUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PhotoUpdateOne) sqlSave(ctx context.Context) (ph *Photo, err error) {
	var (
		builder  = sql.Dialect(puo.driver.Dialect())
		selector = builder.Select(photo.Columns...).From(builder.Table(photo.Table))
	)
	photo.ID(puo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = puo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		ph = &Photo{config: puo.config}
		if err := ph.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Photo: %v", err)
		}
		id = ph.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Photo with id: %v", puo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Photo with the same id: %v", puo.id)
	}

	tx, err := puo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(photo.Table).Where(sql.InInts(photo.FieldID, ids...))
	)
	if value := puo.lat; value != nil {
		updater.Set(photo.FieldLat, *value)
		ph.Lat = *value
	}
	if value := puo.addlat; value != nil {
		updater.Add(photo.FieldLat, *value)
		ph.Lat += *value
	}
	if value := puo.lng; value != nil {
		updater.Set(photo.FieldLng, *value)
		ph.Lng = *value
	}
	if value := puo.addlng; value != nil {
		updater.Add(photo.FieldLng, *value)
		ph.Lng += *value
	}
	if value := puo.image; value != nil {
		updater.Set(photo.FieldImage, *value)
		ph.Image = *value
	}
	if puo.clearimage {
		var value []byte
		ph.Image = value
		updater.SetNull(photo.FieldImage)
	}
	if value := puo.fielname; value != nil {
		updater.Set(photo.FieldFielname, *value)
		ph.Fielname = *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return ph, nil
}
